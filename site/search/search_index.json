{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bem-vindo ao FICO","text":"<p>Leia a documenta\u00e7\u00e3o do Mkdocs em mkdocs.org.</p>"},{"location":"#comandos","title":"Comandos","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Cria um novo projeto.</li> <li><code>mkdocs serve</code> - Inicia o servidor live-reloading de documenta\u00e7\u00e3o.</li> <li><code>mkdocs build</code> - Constr\u00f3i o site da documenta\u00e7\u00e3o.</li> <li><code>mkdocs -h</code> - Imprime a mensagem de ajuda.</li> </ul>"},{"location":"#estrutura-da-documentacao","title":"Estrutura da documenta\u00e7\u00e3o","text":"<pre><code>mkdocs.yml    # Arquivo de configura\u00e7\u00e3o.\ndocs/\n    index.md  # P\u00e1gina principal da documenta\u00e7\u00e3o\n    ...       # Outras p\u00e1ginas via markdown, imagens e outros arquivos.\n</code></pre>"},{"location":"#organizacao-da-documentacao","title":"Organiza\u00e7\u00e3o da documenta\u00e7\u00e3o","text":"<p>Para a organiza\u00e7\u00e3o da documenta\u00e7\u00e3o de usu\u00e1rio, baseie-se na proposta de Di\u00e1taxis, que consiste em 4 classes de documentos:</p> <ol> <li>Tutorials</li> <li>How-To guides</li> <li>Reference</li> <li>Explanation</li> </ol> <p>Warning</p> <p>N\u00e3o \u00e9 obrigat\u00f3rio seguir Di\u00e1taxis. Ela serve apenas como guia.</p> <p>As documenta\u00e7\u00f5es acima s\u00e3o pensadas para o leitor usu\u00e1rio da solu\u00e7\u00e3o.</p> <p>Deve-se ainda considerar a documenta\u00e7\u00e3o para fins acad\u00eamicos e de engenharia de software, i.e., quando quem desenvolve o projeto \u00e9 o leitor. Caso contr\u00e1rio, atualiza\u00e7\u00f5es podem se tornar impratic\u00e1veis.</p> <p>Esta documenta\u00e7\u00e3o possui grande intersec\u00e7\u00e3o com Explanation. A diferen\u00e7a \u00e9 que o p\u00fablico de Explanation \u00e9 o usu\u00e1rio da solu\u00e7\u00e3o, enquanto na documenta\u00e7\u00e3o acad\u00eamica e para desenvolvimento o p\u00fablico alvo s\u00e3o os desenvolvedores e arquitetos da solu\u00e7\u00e3o.</p> <p>Nesta documenta\u00e7\u00e3o o foco \u00e9 destacar as tomadas de decis\u00e3o e organiza\u00e7\u00e3o da solu\u00e7\u00e3o, preferencialmente apesentando um diagrama de componentes da solu\u00e7\u00e3o e como eles se interagem. Em nossa disciplina, iremos incluir o artigo como forma de atingir estes objetivos.</p>"},{"location":"#calculadora-fico","title":"Calculadora FICO","text":"<p>Realiza c\u00e1lculos matem\u00e1ticos com fun\u00e7\u00f5es pr\u00f3prias.</p> <p>M\u00f3dulos exportados por este pacote:</p> <ul> <li><code>calculations</code>: Prov\u00ea v\u00e1rias opera\u00e7\u00f5es matem\u00e1ticas</li> </ul>"},{"location":"#projeto","title":"Projeto","text":"<p>Adicione aqui o pdf do artigo.</p>"},{"location":"#licenca","title":"Licen\u00e7a","text":"<p>Similar ao README.md</p>"},{"location":"#agradecimento","title":"Agradecimento","text":"<p>Similar ao README.md</p>"},{"location":"#como-citar","title":"Como citar","text":"<p>Similar ao README.md</p>"},{"location":"explanation/","title":"Explanation","text":"<p>This part of the project documentation focuses on an understanding-oriented approach. You'll get a chance to read about the background of the project, as well as reasoning about how it was implemented.</p> <p>Expand this section by considering the following points:</p> <ul> <li>Give context and background on your library</li> <li>Explain why you created it</li> <li>Provide multiple examples and approaches of how to work with it</li> <li>Help the reader make connections</li> <li>Avoid writing instructions or technical descriptions here</li> </ul>"},{"location":"how-to-guides/","title":"How-to Guides","text":"<p>This part of the project documentation focuses on a problem-oriented approach. You'll tackle common tasks that you might have, with the help of the code provided in this project.</p>"},{"location":"how-to-guides/#how-to-add-two-numbers","title":"How To Add Two Numbers?","text":"<p>You have two numbers and you need to add them together. You're in luck! The <code>calculator</code> package can help you get this done.</p> <p>Download the code from this GitHub repository and place the <code>calculator/</code> folder in the same directory as your Python script:</p> <pre><code>your_project/\n\u2502\n\u251c\u2500\u2500 calculator/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 calculations.py\n\u2502\n\u2514\u2500\u2500 your_script.py\n</code></pre> <p>Inside of <code>your_script.py</code> you can now import the <code>add()</code> function from the <code>calculator.calculations</code> module:</p> <pre><code># your_script.py\nfrom calculator.calculations import add\n</code></pre> <p>After you've imported the function, you can use it to add any two numbers that you need to add:</p> <pre><code># your_script.py\nfrom calculator.calculations import add\n\nprint(add(20, 22))  # OUTPUT: 42.0\n</code></pre> <p>You're now able to add any two numbers, and you'll always get a <code>float</code> as a result.</p>"},{"location":"reference/","title":"Reference","text":"<p>This part of the project documentation focuses on an information-oriented approach. Use it as a reference for the technical implementation of the <code>calculator</code> project code.</p>"},{"location":"reference/#calculations","title":"Calculations","text":"<p>Provide several sample math calculations.</p> <p>This module allows the user to make mathematical calculations.</p> <p>The module contains the following functions:</p> <ul> <li><code>add(a, b)</code> - Returns the sum of two numbers.</li> <li><code>subtract(a, b)</code> - Returns the difference of two numbers.</li> <li><code>multiply(a, b)</code> - Returns the product of two numbers.</li> <li><code>divide(a, b)</code> - Returns the quotient of two numbers.</li> </ul> <p>Examples:</p> <p>Examples should be written in <code>doctest</code> format, and should illustrate how to use the function.</p> <pre><code>&gt;&gt;&gt; from fico import calculations\n&gt;&gt;&gt; calculations.add(2, 4)\n6.0\n&gt;&gt;&gt; calculations.multiply(2.0, 4.0)\n8.0\n&gt;&gt;&gt; from fico.calculations import divide\n&gt;&gt;&gt; divide(4.0, 2)\n2.0\n</code></pre> <p>Este m\u00f3dulo cont\u00e9m fun\u00e7\u00f5es e bibliotecas relacionadas ao pipeline de captura, pr\u00e9-processamento e indexa\u00e7\u00e3o de relat\u00f3rios.</p>"},{"location":"reference/#fico.calculations.add","title":"add","text":"<pre><code>add(a, b)\n</code></pre> <p>The add function adds two numbers together.</p> Note <p>Do not include the <code>self</code> parameter in the <code>Args</code> section.</p> Tip <p>Just a tip!</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float | int</code> <p>First addend in the addition</p> required <code>b</code> <code>float | int</code> <p>Second addend in the addition</p> required <p>Returns:</p> Type Description <code>float</code> <p>The sum of <code>a</code> and <code>b</code></p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; add(4.0, 2.0)\n6.0\n&gt;&gt;&gt; add(4, 2)\n6.0\n</code></pre> Source code in <code>fico\\calculations.py</code> <pre><code>def add(a: float | int, b: float | int) -&gt; float:\n\"\"\"The add function adds two numbers together.\n\n    Note:\n        Do not include the `self` parameter in the ``Args`` section.\n\n    Tip:\n        Just a tip!\n\n    Args:\n        a: First addend in the addition\n        b: Second addend in the addition\n\n    Returns:\n        The sum of `a` and `b`\n\n    Examples:\n        &gt;&gt;&gt; add(4.0, 2.0)\n        6.0\n        &gt;&gt;&gt; add(4, 2)\n        6.0\n    \"\"\"\n    return float(a + b)\n</code></pre>"},{"location":"reference/#fico.calculations.divide","title":"divide","text":"<pre><code>divide(a, b)\n</code></pre> <p>Calculate the quotient of two numbers.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float | int</code> <p>Dividend in the division</p> required <code>b</code> <code>float | int</code> <p>Divisor in the division</p> required <p>Returns:</p> Type Description <code>float</code> <p>The quotient of <code>a</code> and <code>b</code></p> <p>Raises:</p> Type Description <code>ZeroDivisionError</code> <p>Error when divisor is <code>0</code></p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; divide(4.0, 2.0)\n2.0\n&gt;&gt;&gt; divide(4, 2)\n2.0\n&gt;&gt;&gt; divide(4, 0)\nTraceback (most recent call last):\n...\nZeroDivisionError: division by zero\n</code></pre> Source code in <code>fico\\calculations.py</code> <pre><code>def divide(a: float | int, b: float | int) -&gt; float:\n\"\"\"Calculate the quotient of two numbers.\n\n    Args:\n        a: Dividend in the division\n        b: Divisor in the division\n\n    Returns:\n        The quotient of `a` and `b`\n\n    Raises:\n        ZeroDivisionError: Error when divisor is `0`\n\n    Examples:\n        &gt;&gt;&gt; divide(4.0, 2.0)\n        2.0\n        &gt;&gt;&gt; divide(4, 2)\n        2.0\n        &gt;&gt;&gt; divide(4, 0)\n        Traceback (most recent call last):\n        ...\n        ZeroDivisionError: division by zero\n    \"\"\"\n    if b == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    return float(a / b)\n</code></pre>"},{"location":"reference/#fico.calculations.multiply","title":"multiply","text":"<pre><code>multiply(a, b)\n</code></pre> <p>Calculate the product of two numbers.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float | int</code> <p>Multiplicand in the multiplication</p> required <code>b</code> <code>float | int</code> <p>Multiplier in the multiplication</p> required <p>Returns:</p> Type Description <code>float</code> <p>The product of <code>a</code> and <code>b</code></p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; multiply(4.0, 2.0)\n8.0\n&gt;&gt;&gt; multiply(4, 2)\n8.0\n</code></pre> Source code in <code>fico\\calculations.py</code> <pre><code>def multiply(a: float | int, b: float | int) -&gt; float:\n\"\"\"Calculate the product of two numbers.\n\n    Args:\n        a: Multiplicand in the multiplication\n        b: Multiplier in the multiplication\n\n    Returns:\n        The product of `a` and `b`\n\n    Examples:\n        &gt;&gt;&gt; multiply(4.0, 2.0)\n        8.0\n        &gt;&gt;&gt; multiply(4, 2)\n        8.0\n    \"\"\"\n    return float(a * b)\n</code></pre>"},{"location":"reference/#fico.calculations.subtract","title":"subtract","text":"<pre><code>subtract(a, b)\n</code></pre> <p>Calculate the difference of two numbers.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float | int</code> <p>Minuend in the subtraction</p> required <code>b</code> <code>float | int</code> <p>Subtrahend in the subtraction</p> required <p>Returns:</p> Type Description <code>float</code> <p>The difference between of <code>a</code> and <code>b</code></p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; subtract(4.0, 2.0)\n2.0\n&gt;&gt;&gt; subtract(4, 2)\n2.0\n</code></pre> Source code in <code>fico\\calculations.py</code> <pre><code>def subtract(a: float | int, b: float | int) -&gt; float:\n\"\"\"Calculate the difference of two numbers.\n\n    Args:\n        a: Minuend in the subtraction\n        b: Subtrahend in the subtraction\n\n    Returns:\n        The difference between of `a` and `b`\n\n    Examples:\n        &gt;&gt;&gt; subtract(4.0, 2.0)\n        2.0\n        &gt;&gt;&gt; subtract(4, 2)\n        2.0\n    \"\"\"\n    return float(a - b)\n</code></pre>"},{"location":"reference/#fico.componente_cpi.add_document_to_solr","title":"add_document_to_solr","text":"<pre><code>add_document_to_solr(collection_name, document)\n</code></pre> <p>Adiciona um documento \u00e0 cole\u00e7\u00e3o Solr especificada.</p> <p>Parameters:</p> Name Type Description Default <code>collection_name</code> <code>str</code> <p>O nome da cole\u00e7\u00e3o onde o documento ser\u00e1 adicionado.</p> required <code>document</code> <code>dict</code> <p>Dicion\u00e1rio contendo os campos e valores do documento.</p> required Example <p>document = {     \"title\": \"Example Document\",     \"content\": \"This is an example document.\",     \"author\": \"John Doe\" } add_document_to_solr(\"my_collection\", document)</p> Source code in <code>fico\\componente_cpi.py</code> <pre><code>def add_document_to_solr(collection_name, document):\n\"\"\"Adiciona um documento \u00e0 cole\u00e7\u00e3o Solr especificada.\n\n    Args:\n        collection_name (str): O nome da cole\u00e7\u00e3o onde o documento ser\u00e1 adicionado.\n        document (dict): Dicion\u00e1rio contendo os campos e valores do documento.\n\n    Example:\n        document = {\n            \"title\": \"Example Document\",\n            \"content\": \"This is an example document.\",\n            \"author\": \"John Doe\"\n        }\n        add_document_to_solr(\"my_collection\", document)\n\n    \"\"\"\n    # URL da API do Solr para adicionar documentos\n    solr_url = f\"http://localhost:8983/solr/{collection_name}/update?commit=true\"\n\n    # Envia a requisi\u00e7\u00e3o POST para adicionar o documento\n    response = requests.post(solr_url, json=[document])\n\n    # Verifica o status da resposta\n    if response.status_code == 200:\n        print(\"Documento adicionado com sucesso!\")\n    else:\n        print(\"Erro ao adicionar o documento:\", response.text)\n        print(response.content.decode())\n</code></pre>"},{"location":"reference/#fico.componente_cpi.baixar_arquivo","title":"baixar_arquivo","text":"<pre><code>baixar_arquivo(url, endereco)\n</code></pre> <p>Faz o download de um arquivo a partir de uma URL e salva no caminho especificado.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>A URL do arquivo a ser baixado.</p> required <code>endereco</code> <code>str</code> <p>O caminho completo de destino para salvar o arquivo.</p> required <p>Raises:</p> Type Description <code>Exception</code> <p>Se ocorrer um erro ao fazer o download do arquivo.</p> Example <p>baixar_arquivo('https://example.com/file.pdf', '/path/to/save/file.pdf') Download finalizado. Arquivo salvo em: /path/to/save/file.pdf</p> Source code in <code>fico\\componente_cpi.py</code> <pre><code>def baixar_arquivo(url, endereco):\n\"\"\"Faz o download de um arquivo a partir de uma URL e salva no caminho especificado.\n\n    Args:\n        url (str): A URL do arquivo a ser baixado.\n        endereco (str): O caminho completo de destino para salvar o arquivo.\n\n    Raises:\n        Exception: Se ocorrer um erro ao fazer o download do arquivo.\n\n    Example:\n        &gt;&gt;&gt; baixar_arquivo('https://example.com/file.pdf', '/path/to/save/file.pdf')\n        Download finalizado. Arquivo salvo em: /path/to/save/file.pdf\n\n    \"\"\"\n    resposta = requests.get(url, allow_redirects=True, verify=False, stream=True)\n    if resposta.status_code == requests.codes.OK:\n        with open(endereco, \"wb\") as novo_arquivo:\n            novo_arquivo.write(resposta.content)\n        print(f\"Download finalizado. Arquivo salvo em: {endereco}\")\n    else:\n        resposta.raise_for_status()\n</code></pre>"},{"location":"reference/#fico.componente_cpi.busca_ipe","title":"busca_ipe","text":"<pre><code>busca_ipe(ano)\n</code></pre> <p>Verifica se o diret\u00f3rio informado pelo usu\u00e1rio \u00e9 v\u00e1lido.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>O caminho absoluto do diret\u00f3rio v\u00e1lido.</p> Example <p>verificar_diretorio() Digite o caminho do diret\u00f3rio: /caminho/do/diretorio Diret\u00f3rio raiz para armazenamento dos documentos: /caminho/do/diretorio '/caminho/do/diretorio'</p> Source code in <code>fico\\componente_cpi.py</code> <pre><code>def busca_ipe(ano):\n\"\"\"Verifica se o diret\u00f3rio informado pelo usu\u00e1rio \u00e9 v\u00e1lido.\n\n    Returns:\n        str: O caminho absoluto do diret\u00f3rio v\u00e1lido.\n\n    Example:\n        &gt;&gt;&gt; verificar_diretorio()\n        Digite o caminho do diret\u00f3rio: /caminho/do/diretorio\n        Diret\u00f3rio raiz para armazenamento dos documentos: /caminho/do/diretorio\n        '/caminho/do/diretorio'\n\n    \"\"\"\n    url = (\n        \"https://dados.cvm.gov.br/dados/CIA_ABERTA/DOC/IPE/DADOS/ipe_cia_aberta_%d.zip\"\n        % ano\n    )\n    file = \"ipe_cia_aberta_%d.zip\" % ano\n    r = requests.get(url)\n    zf = zipfile.ZipFile(io.BytesIO(r.content))\n    file = zf.namelist()\n    zf = zf.open(file[0])\n    lines = zf.readlines()\n    lines = [i.strip().decode(\"ISO-8859-1\") for i in lines]\n    lines = [i.split(\";\") for i in lines]\n    len(lines)\n    return lines\n</code></pre>"},{"location":"reference/#fico.componente_cpi.check_collection_exists","title":"check_collection_exists","text":"<pre><code>check_collection_exists(collection_name)\n</code></pre> <p>Verifica se uma cole\u00e7\u00e3o existe no servidor Solr.</p> <p>Parameters:</p> Name Type Description Default <code>collection_name</code> <code>str</code> <p>O nome da cole\u00e7\u00e3o a ser verificada.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True se a cole\u00e7\u00e3o existe, False caso contr\u00e1rio.</p> Example <p>check_collection_exists(\"my_collection\") True</p> Source code in <code>fico\\componente_cpi.py</code> <pre><code>def check_collection_exists(collection_name):\n\"\"\"Verifica se uma cole\u00e7\u00e3o existe no servidor Solr.\n\n    Args:\n        collection_name (str): O nome da cole\u00e7\u00e3o a ser verificada.\n\n    Returns:\n        bool: True se a cole\u00e7\u00e3o existe, False caso contr\u00e1rio.\n\n    Example:\n        &gt;&gt;&gt; check_collection_exists(\"my_collection\")\n        True\n\n    \"\"\"\n    url = f\"http://localhost:8983/solr/{collection_name}/admin/ping\"\n\n    response = requests.get(url)\n    if response.status_code == 200:\n        return True\n    elif response.status_code == 404:\n        return False\n    else:\n        print(\n            \"Falha ao verificar a exist\u00eancia da cole\u00e7\u00e3o. Status:\",\n            response.status_code,\n        )\n        return False\n</code></pre>"},{"location":"reference/#fico.componente_cpi.convert_pdf","title":"convert_pdf","text":"<pre><code>convert_pdf(doc)\n</code></pre> <p>Converte um arquivo PDF em texto.</p> <p>Parameters:</p> Name Type Description Default <code>doc</code> <code>str</code> <p>O caminho do arquivo PDF a ser convertido.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>O texto extra\u00eddo do arquivo PDF.</p> Example <p>text = convert_pdf(\"path/to/file.pdf\") print(text)</p> Source code in <code>fico\\componente_cpi.py</code> <pre><code>def convert_pdf(doc):\n\"\"\"Converte um arquivo PDF em texto.\n\n    Args:\n        doc (str): O caminho do arquivo PDF a ser convertido.\n\n    Returns:\n        str: O texto extra\u00eddo do arquivo PDF.\n\n    Example:\n        text = convert_pdf(\"path/to/file.pdf\")\n        print(text)\n        # Output: Text extracted from the PDF file.\n\n    \"\"\"\n    with open(doc, \"rb\") as f:\n        # Use a biblioteca PyPDF2 para ler o arquivo\n        reader = PyPDF2.PdfReader(f)\n        # Obtenha o n\u00famero de p\u00e1ginas no arquivo\n        num_pages = len(reader.pages)\n        # String vazia para armazenar o texto extra\u00eddo\n        text = \"\"\n        # Itere pelas p\u00e1ginas e extraia o texto\n        for page in range(num_pages):\n            # Obtenha o objeto da p\u00e1gina\n            # page_obj = reader.getPage(page)\n            page_obj = reader.pages[page]\n            # Extraia o texto da p\u00e1gina\n            # page_text = page_obj.extractText()\n            page_text = page_obj.extract_text()\n            # Adicione o texto extra\u00eddo \u00e0 string de texto\n            text += page_text\n    return text\n</code></pre>"},{"location":"reference/#fico.componente_cpi.convert_pdf--output-text-extracted-from-the-pdf-file","title":"Output: Text extracted from the PDF file.","text":""},{"location":"reference/#fico.componente_cpi.create_solr_collection","title":"create_solr_collection","text":"<pre><code>create_solr_collection(collection_name)\n</code></pre> <p>Cria uma cole\u00e7\u00e3o no servidor Solr e atualiza o esquema.</p> <p>Parameters:</p> Name Type Description Default <code>collection_name</code> <code>str</code> <p>O nome da cole\u00e7\u00e3o a ser criada.</p> required Example <p>create_solr_collection(\"my_collection\") Esquema atualizado com sucesso.</p> Source code in <code>fico\\componente_cpi.py</code> <pre><code>def create_solr_collection(collection_name):\n\"\"\"Cria uma cole\u00e7\u00e3o no servidor Solr e atualiza o esquema.\n\n    Args:\n        collection_name (str): O nome da cole\u00e7\u00e3o a ser criada.\n\n    Example:\n        &gt;&gt;&gt; create_solr_collection(\"my_collection\")\n        Esquema atualizado com sucesso.\n\n    \"\"\"\n    # Caminho para o diret\u00f3rio bin do Solr\n    solr_bin_path = (\n        \"C:\\\\Users\\\\thgcn\\\\OneDrive\\\\Academico\\\\PO-245\\\\Projeto\\\\solr-9.2.1\\\\bin\\\\\"\n    )\n\n    # Mude para o diret\u00f3rio bin do Solr\n    os.chdir(solr_bin_path)\n\n    # Comando para criar a cole\u00e7\u00e3o no modo standalone\n    create_collection_command = f\"solr.cmd create -c {collection_name} -s 2 -rf 2\"\n\n    # Execute o comando no terminal\n    subprocess.run(create_collection_command, shell=True)\n\n    # URL do endpoint Solr\n    url = f\"http://localhost:8983/solr/{collection_name}/schema\"\n\n    # Cabe\u00e7alhos da solicita\u00e7\u00e3o POST\n    headers = {\n        \"Content-Type\": \"application/json\",\n    }\n\n    # Corpo da solicita\u00e7\u00e3o POST\n    data = {\n        \"add-field\": [\n            {\"name\": \"name\", \"type\": \"text_general\", \"multiValued\": False},\n            {\"name\": \"company_name\", \"type\": \"text_general\", \"multiValued\": False},\n            {\"name\": \"cod_cvm\", \"type\": \"text_general\", \"multiValued\": False},\n            {\"name\": \"content\", \"type\": \"text_general\", \"multiValued\": True},\n            {\"name\": \"year\", \"type\": \"pint\"},\n            {\"name\": \"date\", \"type\": \"pdate\"},\n            {\"name\": \"keywords\", \"type\": \"text_general\", \"multiValued\": True},\n            {\"name\": \"size\", \"type\": \"pint\"},\n            {\"name\": \"tokens\", \"type\": \"text_general\", \"multiValued\": False},\n            {\"name\": \"tensor\", \"type\": \"text_general\", \"multiValued\": False},\n            {\"name\": \"file\", \"type\": \"text_general\", \"multiValued\": False},\n        ],\n    }\n\n    # Enviar solicita\u00e7\u00e3o POST para atualizar o esquema no Solr\n    response = requests.post(url, json=data, headers=headers)\n\n    if response.status_code == 200:\n        print(\"Esquema atualizado com sucesso.\")\n    else:\n        print(\"Falha ao atualizar o esquema. Status:\", response.status_code)\n</code></pre>"},{"location":"reference/#fico.componente_cpi.download_def","title":"download_def","text":"<pre><code>download_def(empresa, year)\n</code></pre> <p>Realiza o download de arquivos espec\u00edficos com base na empresa e no ano fornecidos.</p> <p>Parameters:</p> Name Type Description Default <code>empresa</code> <code>str</code> <p>O nome da empresa para a qual deseja-se fazer o download dos arquivos.</p> required <code>year</code> <code>int</code> <p>O ano para o qual deseja-se fazer o download dos arquivos.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>Uma lista de dicion\u00e1rios contendo os metadados dos arquivos baixados.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Se houver duplicidade de empresas encontradas nos dados econ\u00f4mico-financeiros.</p> Example <p>download_def(\"Empresa XYZ\", 2023) Empresa encontrada: Empresa XYZ | codigo cvm: 12345 Ano: 2023 nome do arquivo: 12345_empresa_xyz caminho dos arquivos: /caminho/do/arquivo/12345_empresa_xyz ...</p> Source code in <code>fico\\componente_cpi.py</code> <pre><code>def download_def(empresa, year):\n\"\"\"Realiza o download de arquivos espec\u00edficos com base na empresa e no ano fornecidos.\n\n    Args:\n        empresa (str): O nome da empresa para a qual deseja-se fazer o download dos arquivos.\n        year (int): O ano para o qual deseja-se fazer o download dos arquivos.\n\n    Returns:\n        list: Uma lista de dicion\u00e1rios contendo os metadados dos arquivos baixados.\n\n    Raises:\n        ValueError: Se houver duplicidade de empresas encontradas nos dados econ\u00f4mico-financeiros.\n\n    Example:\n        &gt;&gt;&gt; download_def(\"Empresa XYZ\", 2023)\n        Empresa encontrada: Empresa XYZ | codigo cvm: 12345\n        Ano: 2023\n        nome do arquivo: 12345_empresa_xyz\n        caminho dos arquivos: /caminho/do/arquivo/12345_empresa_xyz\n        ...\n\n    \"\"\"\n    lines = busca_ipe(year)\n    defi = search(lines, \"Dados Econ\u00f4mico-Financeiros\")\n    year = year\n    data = []\n    for a in range(len(defi)):\n        count = 0\n        if empresa.upper() in defi[a][1]:\n            count += 1\n            if count &gt; 1:\n                raise ValueError(\"Duplicidade encontrada.\")\n            else:\n                empresa_name = defi[a][1]\n                num_cvm = defi[a][2]\n    print(\"Empresa encontrada: \" + empresa_name + \" | codigo cvm: \" + num_cvm)\n    print(\"Ano: \" + str(year))\n    for a in range(len(defi)):\n        if defi[a][2] in num_cvm:\n            # sufix = re.sub(u'[^a-zA-Z0-9]', '_', defi[a][2] + \"_\" + defi[a][1])\n            sufix = transform_string(defi[a][2] + \"_\" + defi[a][1])\n            company = os.path.join(root, sufix)\n            # category = re.sub(u'[^a-zA-Z0-9\u00e7\u00e3\u00e0\u00e1\u00ea\u00e9\u00ed\u00f5\u00f3\u00fa]', '_', defi[a][5])\n            category = transform_string(defi[a][5])\n            print(\"nome do arquivo: \" + sufix)\n            print(\"caminho dos arquivos: \" + company)\n            if not Path(root, sufix).is_dir():\n                print(\"diretorio n\u00e3o existe e ser\u00e1 criado\")\n                os.makedirs(os.path.join(root, sufix))\n            if not Path(company, str(year)).is_dir():\n                print(\"diretorio n\u00e3o existe e ser\u00e1 criado\")\n                os.makedirs(os.path.join(company, str(year)))\n            diryear = os.path.join(company, str(year))\n            if not Path(diryear, category).is_dir():\n                print(\"diretorio n\u00e3o existe e ser\u00e1 criado\")\n                os.makedirs(os.path.join(diryear, category))\n            dircategory = os.path.join(diryear, category)\n            url = defi[a][12]\n            nome = transform_string(\n                defi[a][2]\n                + \"_\"\n                + defi[a][1]\n                + \"_\"\n                + defi[a][7][1:50]\n                + \"_\"\n                + defi[a][8],\n            )[1:100]\n            baixar_arquivo(url, os.path.join(dircategory, \"%s.pdf\" % nome))\n            title = transform_string(defi[a][6][0:50])\n            if not title:\n                if not defi[a][7]:\n                    title = defi[a][7]\n                else:\n                    if not defi[a][5]:\n                        title = defi[a][5]\n                    else:\n                        if not defi[a][4]:\n                            title = defi[a][4]\n                        else:\n                            title = defi[a][1]\n            company_name = transform_string(defi[a][1])\n            cod_cvm = defi[a][2]\n            date = defi[a][3]\n            content = defi[a][7]\n            if not content:\n                content = defi[a][6]\n            keyword = defi[a][4]\n            size = os.path.getsize(os.path.join(dircategory, \"%s.pdf\" % nome))\n            file = os.path.join(dircategory, \"%s.pdf\" % nome)\n            data.append(\n                {\n                    \"name\": title,\n                    \"type\": \"string\",\n                    \"company_name\": company_name,\n                    \"cod_cvm\": cod_cvm,\n                    \"content\": content,\n                    \"year\": year,\n                    \"date\": date,\n                    \"keywords\": keyword,\n                    \"size\": size,\n                    \"tokens\": \"\",\n                    \"tensor\": \"\",\n                    \"file\": file,\n                },\n            )\n    return data\n</code></pre>"},{"location":"reference/#fico.componente_cpi.normalize_text","title":"normalize_text","text":"<pre><code>normalize_text(text)\n</code></pre> <p>Normaliza um texto, convertendo-o para min\u00fasculas e removendo caracteres especiais e acentua\u00e7\u00e3o.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>O texto a ser normalizado.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>O texto normalizado.</p> Example <p>text = \"Hello, World! This is an example text.\" normalized_text = normalize_text(text) print(normalized_text)</p> Source code in <code>fico\\componente_cpi.py</code> <pre><code>def normalize_text(text):\n\"\"\"Normaliza um texto, convertendo-o para min\u00fasculas e removendo caracteres especiais e acentua\u00e7\u00e3o.\n\n    Args:\n        text (str): O texto a ser normalizado.\n\n    Returns:\n        str: O texto normalizado.\n\n    Example:\n        text = \"Hello, World! This is an example text.\"\n        normalized_text = normalize_text(text)\n        print(normalized_text)\n        # Output: hello world this is an example text\n\n    \"\"\"\n    # Converte o texto para min\u00fasculas\n    normalized_text = text.lower()\n    # Remove caracteres especiais e acentua\u00e7\u00e3o\n    normalized_text = re.sub(r\"[^\\w\\s]\", \"\", normalized_text)\n    # Retorna o texto limpo\n    return normalized_text\n</code></pre>"},{"location":"reference/#fico.componente_cpi.normalize_text--output-hello-world-this-is-an-example-text","title":"Output: hello world this is an example text","text":""},{"location":"reference/#fico.componente_cpi.pipeline","title":"pipeline","text":"<pre><code>pipeline(empresa, ano)\n</code></pre> <p>Executa o pipeline de captura, preprocessamento e indexa\u00e7\u00e3o de documentos econ\u00f4mico-financeiros.</p> <p>Parameters:</p> Name Type Description Default <code>empresa</code> <code>str</code> <p>O nome da empresa para o qual deseja-se executar o pipeline.</p> required <code>ano</code> <code>int</code> <p>O ano para o qual deseja-se executar o pipeline.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>Uma mensagem indicando o resultado da atualiza\u00e7\u00e3o do esquema no Solr.</p> Example <p>pipeline(\"Empresa XYZ\", 2023) Inicio do pipeline de captura *** Empresa encontrada: Empresa XYZ | codigo cvm: 123456 Ano: 2023 nome do arquivo: 123456_Empresa_XYZ caminho dos arquivos: /caminho/do/diretorio/123456_Empresa_XYZ diretorio n\u00e3o existe e ser\u00e1 criado diretorio n\u00e3o existe e ser\u00e1 criado diretorio n\u00e3o existe e ser\u00e1 criado Download finalizado. Arquivo salvo em: /caminho/do/diretorio/123456_Empresa_XYZ/2023/Economic_Financial_Data/123456_Empresa_XYZ.pdf gera\u00e7\u00e3o de token e tensor..... Documento adicionado com sucesso! ... 1/2 Esquema atualizado com sucesso. 2/2 Commit realizado com sucesso.</p> Source code in <code>fico\\componente_cpi.py</code> <pre><code>def pipeline(empresa, ano):\n\"\"\"Executa o pipeline de captura, preprocessamento e indexa\u00e7\u00e3o de documentos econ\u00f4mico-financeiros.\n\n    Args:\n        empresa (str): O nome da empresa para o qual deseja-se executar o pipeline.\n        ano (int): O ano para o qual deseja-se executar o pipeline.\n\n    Returns:\n        str: Uma mensagem indicando o resultado da atualiza\u00e7\u00e3o do esquema no Solr.\n\n    Example:\n        &gt;&gt;&gt; pipeline(\"Empresa XYZ\", 2023)\n        Inicio do pipeline de captura *********\n        Empresa encontrada: Empresa XYZ | codigo cvm: 123456\n        Ano: 2023\n        nome do arquivo: 123456_Empresa_XYZ\n        caminho dos arquivos: /caminho/do/diretorio/123456_Empresa_XYZ\n        diretorio n\u00e3o existe e ser\u00e1 criado\n        diretorio n\u00e3o existe e ser\u00e1 criado\n        diretorio n\u00e3o existe e ser\u00e1 criado\n        Download finalizado. Arquivo salvo em: /caminho/do/diretorio/123456_Empresa_XYZ/2023/Economic_Financial_Data/123456_Empresa_XYZ.pdf\n        gera\u00e7\u00e3o de token e tensor.....\n        Documento adicionado com sucesso!\n        ...\n        1/2 Esquema atualizado com sucesso.\n        2/2 Commit realizado com sucesso.\n    \"\"\"\n    # Faz o download do documento\n    verificar_diretorio()\n    print(\"Inicio do pipeline de captura *********\")\n    doc = download_def(empresa, ano)\n    print(\"Inicio do pipeline de preprocessamento e indexacao *********\")\n    for item in doc:\n        # Define o tipo do item como \"document\"\n        item[\"type\"] = \"document\"\n        # Define o nome da cole\u00e7\u00e3o como \"dados_eco\"\n        collection_name = \"dados_eco\"\n        # Obt\u00e9m o diret\u00f3rio do arquivo\n        diretorio = os.path.dirname(item[\"file\"])\n        # Obt\u00e9m o nome do arquivo sem a extens\u00e3o\n        tokens_tensor, ext = os.path.splitext(os.path.basename(item[\"file\"]))\n        # Define o caminho do arquivo de tokens e tensor\n        dataprep = os.path.join(diretorio, f\"{tokens_tensor}_TOKENS_TENSOR.txt\")\n        # Cria o output data com os tokens e tensor\n        print(\"geracao de token e tensor.....\")\n        text = convert_pdf(item[\"file\"])\n        token = tokengen(text)\n        vector = vector_one(text).tolist()\n\n        output_data = [\n            {\n                \"tokens\": token,\n                \"tensor\": vector,\n            },\n        ]\n        # Salva o output data em um arquivo JSON\n        with open(dataprep, \"w\") as file:\n            json.dump(output_data, file)\n        # Atualiza os campos tokens e tensor do item com o caminho do arquivo\n        item[\"tokens\"] = dataprep\n        item[\"tensor\"] = dataprep\n        # Verifica se algum campo est\u00e1 ausente e define como \"Descri\u00e7\u00e3o ausente\" se necess\u00e1rio\n        fields = [\n            \"name\",\n            \"type\",\n            \"company_name\",\n            \"cod_cvm\",\n            \"content\",\n            \"year\",\n            \"date\",\n            \"keywords\",\n            \"size\",\n            \"tokens\",\n            \"tensor\",\n            \"file\",\n        ]\n        for field in fields:\n            if not item[field]:\n                item[field] = \"Descri\u00e7\u00e3o ausente\"\n        # Adiciona o documento ao Solr\n        collection_name = \"dados_eco\"\n        add_document_to_solr(collection_name, item)\n    # Atualiza o schema fora do loop\n    return update_schema(doc, collection_name)\n</code></pre>"},{"location":"reference/#fico.componente_cpi.question","title":"question","text":"<pre><code>question(text, question)\n</code></pre> <p>Calcula a similaridade entre dois vetores.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>torch.Tensor</code> <p>O primeiro vetor.</p> required <code>b</code> <code>torch.Tensor</code> <p>O segundo vetor.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>O valor da similaridade entre os vetores.</p> Example <p>vector1 = torch.tensor([0.1, 0.2, 0.3]) vector2 = torch.tensor([0.4, 0.5, 0.6]) similarity = similarity_vector(vector1, vector2) print(similarity)</p> Source code in <code>fico\\componente_cpi.py</code> <pre><code>def question(text, question):\n\"\"\"Calcula a similaridade entre dois vetores.\n\n    Args:\n        a (torch.Tensor): O primeiro vetor.\n        b (torch.Tensor): O segundo vetor.\n\n    Returns:\n        float: O valor da similaridade entre os vetores.\n\n    Example:\n        vector1 = torch.tensor([0.1, 0.2, 0.3])\n        vector2 = torch.tensor([0.4, 0.5, 0.6])\n        similarity = similarity_vector(vector1, vector2)\n        print(similarity)\n        # Output: Similarity score between the vectors.\n\n    \"\"\"\n    question = question\n    max_answer_length = 512\n    max_length = 512\n    input_parts = []\n    input_parts = [text[i : i + max_length] for i in range(0, len(text), max_length)]\n    # Lista para armazenar as respostas\n    answers = []\n    # Processa cada parte do texto\n    for part in input_parts:\n        # Tokeniza a parte do texto\n        # Tokeniza a pergunta e o texto menor\n        encoding = tokenizer.encode_plus(\n            question,\n            part,\n            return_tensors=\"pt\",\n            max_length=512,\n            truncation=True,\n        )\n        input_ids = encoding[\"input_ids\"]\n        attention_mask = encoding[\"attention_mask\"]\n        # Obt\u00e9m as respostas do modelo pr\u00e9-treinado\n        with torch.no_grad():\n            outputs = model_forquestion(\n                input_ids=input_ids,\n                attention_mask=attention_mask,\n            )\n            start_scores = outputs.start_logits\n            end_scores = outputs.end_logits\n        # Obt\u00e9m a resposta com maior probabilidade\n        answer_start = torch.argmax(start_scores)\n        answer_end = torch.argmax(end_scores)\n        answer = tokenizer.convert_tokens_to_string(\n            tokenizer.convert_ids_to_tokens(\n                input_ids[0][answer_start.item() : answer_end.item() + 1],\n            ),\n        )\n        # Adiciona a resposta \u00e0 lista\n        answers.append(answer)\n    # Combina as respostas\n    combined_answer = \" \".join(answers)\n    # Limita o tamanho da resposta final\n    combined_answer = combined_answer[:max_answer_length]\n    # Formata\u00e7\u00e3o da resposta final\n    formatted_answer = \"RESPOSTA:\\n\\n\"\n    formatted_answer += combined_answer.replace(\".\", \".\\n\\n\")\n    # Apresenta a resposta final\n    return formatted_answer\n</code></pre>"},{"location":"reference/#fico.componente_cpi.question--output-similarity-score-between-the-vectors","title":"Output: Similarity score between the vectors.","text":""},{"location":"reference/#fico.componente_cpi.remover_stopwords","title":"remover_stopwords","text":"<pre><code>remover_stopwords(tokens)\n</code></pre> <p>Remove as stopwords de uma lista de tokens.</p> <p>Parameters:</p> Name Type Description Default <code>tokens</code> <code>list</code> <p>A lista de tokens.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A lista de tokens sem as stopwords.</p> Example <p>token_list = ['This', 'is', 'a', 'sample', 'sentence'] tokens_without_stopwords = remover_stopwords(token_list) print(tokens_without_stopwords)</p> Source code in <code>fico\\componente_cpi.py</code> <pre><code>def remover_stopwords(tokens):\n\"\"\"Remove as stopwords de uma lista de tokens.\n\n    Args:\n        tokens (list): A lista de tokens.\n\n    Returns:\n        list: A lista de tokens sem as stopwords.\n\n    Example:\n        token_list = ['This', 'is', 'a', 'sample', 'sentence']\n        tokens_without_stopwords = remover_stopwords(token_list)\n        print(tokens_without_stopwords)\n        # Output: ['This', 'sample', 'sentence']\n\n    \"\"\"\n    # Carrega o modelo do SpaCy para o idioma portugu\u00eas\n    nlp = spacy.load(\"pt_core_news_lg\")\n\n    # Cria uma lista para armazenar os tokens sem stopwords\n    tokens_sem_stopwords = []\n\n    # Percorre cada token na lista\n    for token in tokens:\n        # Verifica se o token n\u00e3o \u00e9 uma stopword\n        if not nlp.vocab[token].is_stop:\n            tokens_sem_stopwords.append(token)\n    return tokens_sem_stopwords\n</code></pre>"},{"location":"reference/#fico.componente_cpi.remover_stopwords--output-this-sample-sentence","title":"Output: ['This', 'sample', 'sentence']","text":""},{"location":"reference/#fico.componente_cpi.search","title":"search","text":"<pre><code>search(lista, valor)\n</code></pre> <p>Retorna uma lista de elementos da lista que cont\u00eam o valor especificado.</p> <p>Parameters:</p> Name Type Description Default <code>lista</code> <code>list</code> <p>A lista de elementos para realizar a busca.</p> required <code>valor</code> <p>O valor a ser procurado nos elementos da lista.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>Uma lista dos elementos que cont\u00eam o valor especificado.</p> Example <p>search(['apple', 'banana', 'orange'], 'an') ['banana', 'orange']</p> Source code in <code>fico\\componente_cpi.py</code> <pre><code>def search(lista, valor):\n\"\"\"Retorna uma lista de elementos da lista que cont\u00eam o valor especificado.\n\n    Args:\n        lista (list): A lista de elementos para realizar a busca.\n        valor: O valor a ser procurado nos elementos da lista.\n\n    Returns:\n        list: Uma lista dos elementos que cont\u00eam o valor especificado.\n\n    Example:\n        &gt;&gt;&gt; search(['apple', 'banana', 'orange'], 'an')\n        ['banana', 'orange']\n\n    \"\"\"\n    return [(lista[lista.index(x)]) for x in lista if valor in x]\n</code></pre>"},{"location":"reference/#fico.componente_cpi.similarity_vector","title":"similarity_vector","text":"<pre><code>similarity_vector(a, b)\n</code></pre> <p>Calcula a similaridade entre dois vetores.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>torch.Tensor</code> <p>O primeiro vetor.</p> required <code>b</code> <code>torch.Tensor</code> <p>O segundo vetor.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>O valor da similaridade entre os vetores.</p> Example <p>vector1 = torch.tensor([0.1, 0.2, 0.3]) vector2 = torch.tensor([0.4, 0.5, 0.6]) similarity = similarity_vector(vector1, vector2) print(similarity)</p> Source code in <code>fico\\componente_cpi.py</code> <pre><code>def similarity_vector(a, b):\n\"\"\"Calcula a similaridade entre dois vetores.\n\n    Args:\n        a (torch.Tensor): O primeiro vetor.\n        b (torch.Tensor): O segundo vetor.\n\n    Returns:\n        float: O valor da similaridade entre os vetores.\n\n    Example:\n        vector1 = torch.tensor([0.1, 0.2, 0.3])\n        vector2 = torch.tensor([0.4, 0.5, 0.6])\n        similarity = similarity_vector(vector1, vector2)\n        print(similarity)\n        # Output: Similarity score between the vectors.\n\n    \"\"\"\n    size_a = a.size(0)\n    size_b = b.size(0)\n    if size_a == size_b:\n        # similarity_score = cosine_similarity(a, b)\n        similarity_score = cosine_similarity(a.float(), b.float())\n        return similarity_score.item()\n    if size_a &gt; size_b:\n        diff = size_a - size_b\n        padded = F.pad(b, pad=(0, diff), mode=\"constant\", value=0)\n        similarity_score = cosine_similarity(a.float(), padded.float())\n        return similarity_score.item()\n    if size_a &lt; size_b:\n        diff = size_b - size_a\n        padded = F.pad(a, pad=(0, diff), mode=\"constant\", value=0)\n        similarity_score = cosine_similarity(b.float(), padded.float())\n        return similarity_score.item()\n    return None\n</code></pre>"},{"location":"reference/#fico.componente_cpi.similarity_vector--output-similarity-score-between-the-vectors","title":"Output: Similarity score between the vectors.","text":""},{"location":"reference/#fico.componente_cpi.summarization","title":"summarization","text":"<pre><code>summarization(text)\n</code></pre> <p>Gera um resumo do texto fornecido.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>O texto a ser resumido.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>O resumo gerado do texto.</p> Example <p>text = \"This is a sample text. It contains multiple sentences. The goal is to generate a summary.\" summary = summarization(text) print(summary)</p> Source code in <code>fico\\componente_cpi.py</code> <pre><code>def summarization(text):\n\"\"\"Gera um resumo do texto fornecido.\n\n    Args:\n        text (str): O texto a ser resumido.\n\n    Returns:\n        str: O resumo gerado do texto.\n\n    Example:\n        text = \"This is a sample text. It contains multiple sentences. The goal is to generate a summary.\"\n        summary = summarization(text)\n        print(summary)\n        # Output: A summary of the text.\n\n    \"\"\"\n    num_sentences = 5\n    # Tokenizar o texto em partes\n    input_parts = text.split(\". \")\n    summaries = []\n    for part in input_parts:\n        length = len(part)\n        m_length = int(length * 0.4)\n        # Tokenizar a parte do texto\n        inputs = tokenizersum.encode(\"summarize: \" + part, return_tensors=\"pt\")\n        # Gerar o resumo da parte do texto usando o modelo T5\n        outputs = modelsum.generate(\n            inputs,\n            max_length=m_length,\n            num_beams=4,\n            early_stopping=True,\n        )\n        summary = tokenizersum.decode(outputs[0], skip_special_tokens=True)\n        # Adicionar o resumo \u00e0 lista de sum\u00e1rios\n        summaries.append(summary)\n\n    # Concatenar os sum\u00e1rios em um \u00fanico texto\n    concatenated_summary = \" \".join(summaries)\n\n    # Extrair as N senten\u00e7as mais importantes\n    sentences = concatenated_summary.split(\". \")\n    top_sentences = sorted(sentences, key=lambda x: len(x), reverse=True)[\n        :num_sentences\n    ]\n\n    return \". \".join(top_sentences)\n</code></pre>"},{"location":"reference/#fico.componente_cpi.summarization--output-a-summary-of-the-text","title":"Output: A summary of the text.","text":""},{"location":"reference/#fico.componente_cpi.tokengen","title":"tokengen","text":"<pre><code>tokengen(text)\n</code></pre> <p>Gera uma lista de tokens a partir de um texto.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>O texto a ser tokenizado.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>Uma lista de tokens.</p> Example <p>text = \"Hello, World! This is an example text.\" tokens = tokengen(text) print(tokens)</p> Source code in <code>fico\\componente_cpi.py</code> <pre><code>def tokengen(text):\n\"\"\"Gera uma lista de tokens a partir de um texto.\n\n    Args:\n        text (str): O texto a ser tokenizado.\n\n    Returns:\n        list: Uma lista de tokens.\n\n    Example:\n        text = \"Hello, World! This is an example text.\"\n        tokens = tokengen(text)\n        print(tokens)\n        # Output: ['[CLS]', 'hello', ',', 'world', '!', 'this', 'is', 'an', 'example', 'text', '.', '[SEP]']\n\n    \"\"\"\n    tokens = tokenizer.encode(text, add_special_tokens=True)\n    token_list = tokenizer.convert_ids_to_tokens(tokens)\n    return token_list\n</code></pre>"},{"location":"reference/#fico.componente_cpi.tokengen--output-cls-hello-world-this-is-an-example-text-sep","title":"Output: ['[CLS]', 'hello', ',', 'world', '!', 'this', 'is', 'an', 'example', 'text', '.', '[SEP]']","text":""},{"location":"reference/#fico.componente_cpi.transform_string","title":"transform_string","text":"<pre><code>transform_string(text)\n</code></pre> <p>Transforma uma string removendo acentos, substituindo espa\u00e7os por underscores e convertendo para letras min\u00fasculas.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>A string a ser transformada.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>A string transformada.</p> Example <p>transform_string(\"Ol\u00e1, Mundo!\") 'ola_mundo'</p> Source code in <code>fico\\componente_cpi.py</code> <pre><code>def transform_string(text):\n\"\"\"Transforma uma string removendo acentos, substituindo espa\u00e7os por underscores e convertendo para letras min\u00fasculas.\n\n    Args:\n        text (str): A string a ser transformada.\n\n    Returns:\n        str: A string transformada.\n\n    Example:\n        &gt;&gt;&gt; transform_string(\"Ol\u00e1, Mundo!\")\n        'ola_mundo'\n\n    \"\"\"\n    text = unidecode.unidecode(text)\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\".\", \"\")\n    text = text.lower()\n    return text\n</code></pre>"},{"location":"reference/#fico.componente_cpi.update_schema","title":"update_schema","text":"<pre><code>update_schema(data, collection_name)\n</code></pre> <p>Atualiza o esquema da cole\u00e7\u00e3o Solr com os campos fornecidos.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Dicion\u00e1rio contendo os campos e configura\u00e7\u00f5es a serem adicionados ao esquema.</p> required <code>collection_name</code> <code>str</code> <p>O nome da cole\u00e7\u00e3o a ser atualizada.</p> required Example <p>data = {     \"add-field\": [         {\"name\": \"title\", \"type\": \"text_general\", \"multiValued\": False},         {\"name\": \"content\", \"type\": \"text_general\", \"multiValued\": True},         {\"name\": \"author\", \"type\": \"text_general\", \"multiValued\": False}     ] } update_schema(data, \"my_collection\")</p> Source code in <code>fico\\componente_cpi.py</code> <pre><code>def update_schema(data, collection_name):\n\"\"\"Atualiza o esquema da cole\u00e7\u00e3o Solr com os campos fornecidos.\n\n    Args:\n        data (dict): Dicion\u00e1rio contendo os campos e configura\u00e7\u00f5es a serem adicionados ao esquema.\n        collection_name (str): O nome da cole\u00e7\u00e3o a ser atualizada.\n\n    Example:\n        data = {\n            \"add-field\": [\n                {\"name\": \"title\", \"type\": \"text_general\", \"multiValued\": False},\n                {\"name\": \"content\", \"type\": \"text_general\", \"multiValued\": True},\n                {\"name\": \"author\", \"type\": \"text_general\", \"multiValued\": False}\n            ]\n        }\n        update_schema(data, \"my_collection\")\n\n    \"\"\"\n    # URL do endpoint Solr\n    url = f\"http://localhost:8983/solr/{collection_name}/schema\"\n\n    # Cabe\u00e7alhos da solicita\u00e7\u00e3o POST\n    headers = {\n        \"Content-Type\": \"application/json\",\n    }\n\n    # Converter tensores em listas\n    data = json.loads(json.dumps(data, default=lambda x: x.tolist()))\n\n    # Enviar solicita\u00e7\u00e3o POST para atualizar o esquema no Solr\n    response = requests.post(url, json=data, headers=headers)\n\n    upd = f\"http://localhost:8983/solr/{core_name}/config\"\n\n    if response.status_code == 200:\n        print(\"1/2 Esquema atualizado com sucesso.\")\n        data_up = {\n            \"set-property\": {\n                \"updateHandler.autoCommit.maxTime\": 15000,\n            },\n        }\n        response = requests.post(upd, headers=headers, json=data_up)\n        if response.status_code == 200:\n            print(\"2/2 Commit realizado com sucesso.\")\n        else:\n            print(\"Falha no commit. Status:\", response.status_code)\n            print(response.content.decode())\n    else:\n        print(\"Falha ao atualizar o esquema. Status:\", response.status_code)\n        print(response.content.decode())\n</code></pre>"},{"location":"reference/#fico.componente_cpi.vector_one","title":"vector_one","text":"<pre><code>vector_one(text)\n</code></pre> <p>Gera um vetor de representa\u00e7\u00e3o para um texto.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>O texto a ser vetorizado.</p> required <p>Returns:</p> Type Description <p>torch.Tensor: O vetor de representa\u00e7\u00e3o do texto.</p> Example <p>text = \"This is a sample text.\" text_vector = vector_one(text) print(text_vector)</p> Source code in <code>fico\\componente_cpi.py</code> <pre><code>def vector_one(text):\n\"\"\"Gera um vetor de representa\u00e7\u00e3o para um texto.\n\n    Args:\n        text (str): O texto a ser vetorizado.\n\n    Returns:\n        torch.Tensor: O vetor de representa\u00e7\u00e3o do texto.\n\n    Example:\n        text = \"This is a sample text.\"\n        text_vector = vector_one(text)\n        print(text_vector)\n        # Output: torch.Tensor representing the vector for the text.\n\n\n    \"\"\"\n    tokens = tokenizer.encode(text, add_special_tokens=True)\n    input_ids = torch.tensor(tokens).unsqueeze(0)\n\n    max_length = 4096\n    vectors = []\n\n    # Divide the tokenized text into parts\n    input_parts = [\n        input_ids[:, i : i + max_length]\n        for i in range(0, input_ids.shape[1], max_length)\n    ]\n\n    # Process each part of the tokenized text\n    for part in input_parts:\n        # Generate the embeddings vectors\n        with torch.no_grad():\n            outputs = model(part)\n            last_hidden_states = outputs.last_hidden_state\n\n        # Calculate the average vector\n        average_vector = torch.mean(last_hidden_states, dim=1)\n\n        # Add the average vector to the list\n        vectors.append(average_vector)\n\n    # Concatenate the generated vectors\n    text_vector = torch.cat(vectors, dim=1)\n    return text_vector\n</code></pre>"},{"location":"reference/#fico.componente_cpi.vector_one--output-torchtensor-representing-the-vector-for-the-text","title":"Output: torch.Tensor representing the vector for the text.","text":""},{"location":"reference/#fico.componente_cpi.verificar_diretorio","title":"verificar_diretorio","text":"<pre><code>verificar_diretorio()\n</code></pre> <p>Verifica se o diret\u00f3rio informado pelo usu\u00e1rio \u00e9 v\u00e1lido.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>O caminho absoluto do diret\u00f3rio v\u00e1lido.</p> Example <p>verificar_diretorio() Digite o caminho do diret\u00f3rio: /caminho/do/diretorio Diret\u00f3rio raiz para armazenamento dos documentos: /caminho/do/diretorio '/caminho/do/diretorio'</p> Source code in <code>fico\\componente_cpi.py</code> <pre><code>def verificar_diretorio():\n\"\"\"Verifica se o diret\u00f3rio informado pelo usu\u00e1rio \u00e9 v\u00e1lido.\n\n    Returns:\n        str: O caminho absoluto do diret\u00f3rio v\u00e1lido.\n\n    Example:\n        &gt;&gt;&gt; verificar_diretorio()\n        Digite o caminho do diret\u00f3rio: /caminho/do/diretorio\n        Diret\u00f3rio raiz para armazenamento dos documentos: /caminho/do/diretorio\n        '/caminho/do/diretorio'\n\n    \"\"\"\n    root = input(\"Digite o caminho do diret\u00f3rio: \")\n    try:\n        if os.path.isdir(root):\n            print(\"Diret\u00f3rio raiz para armazenamento dos documentos: \" + root)\n            return root\n        else:\n            print(\"O diret\u00f3rio n\u00e3o existe ou n\u00e3o \u00e9 v\u00e1lido.\")\n    except FileNotFoundError:\n        print(\n            \"O diret\u00f3rio inserido n\u00e3o existe ou n\u00e3o \u00e9 v\u00e1lido. Certifique-se que o nome est\u00e1 correto\",\n        )\n</code></pre>"},{"location":"tutorials/","title":"Tutorials","text":"<p>This part of the project documentation focuses on a learning-oriented approach. You'll learn how to get started with the code in this project.</p> <p>Expand this section by considering the following points:</p> <ul> <li>Help newcomers with getting started</li> <li>Teach readers about your library by making them write code</li> <li>Inspire confidence through examples that work for everyone, repeatably</li> <li>Give readers an immediate sense of achievement</li> <li>Show concrete examples, no abstractions</li> <li>Provide the minimum necessary explanation</li> <li>Avoid any distractions</li> </ul> <p>Warning</p> <p>Fa\u00e7a ao menos 1 tutorial com jupyter notebook.</p>"}]}